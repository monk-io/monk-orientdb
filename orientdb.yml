---
namespace: orientdb

base:
  metadata:
    defines: metadata
    name: OrientDB Community Edition
    description: |
      OrientDB is a multi-model database management system that supports graph, document, key-value, and object-oriented models. It is designed to be a flexible and scalable database solution that can handle a wide range of data types and structures.

      In the graph model, OrientDB is similar to Neo4j, in that it represents data as nodes and edges. However, OrientDB also supports other data models, such as document-oriented and key-value stores, which allow for greater flexibility in data representation.

      OrientDB is a NoSQL database, which means that it does not require a fixed schema to be defined before data can be stored. Instead, data can be added and modified dynamically as needed. OrientDB is also designed to be highly scalable, with built-in support for sharding and distributed clustering.
      
      OrientDB provides a SQL-like query language called OrientSQL, as well as a powerful API for accessing and manipulating data. It also includes a number of built-in features, such as a graph editor and a document editor, which make it easier to work with and visualize complex data structures.

      Overall, OrientDB is a powerful and flexible database management system that is well-suited for applications that require support for multiple data models and flexible schema. It is used in a wide range of applications, including social networks, e-commerce platforms, and financial services.
    website: https://orientdb.org/
    publisher: monk.io
    icon: https://orientdb.org/themes/custom/orientdb/images/logo.png
  containers:
    db:
      image: orientdb
      image-tag: <- `${image}`
      paths:
        - <- `${monk-volume-path}/orientdb:/orientdb/databases`
    
db:
  defines: runnable
  inherits: orientdb/base
  variables:
    db_password:
      env: ORIENTDB_ROOT_PASSWORD
      type: string
      value: password
    db_port:
      type: int
      value: 2424
    db_studio_port:
      type: int
      value: 2480
    image:
      type: string
      value: 3.2.17-tp3
  containers:
    db:
      ports:
         - <- `0.0.0.0:${db_port}:2424`
         - <- `0.0.0.0:${db_studio_port}:2480`
  services:
    db:
      port: 2424
      container: db
      protocol: tcp
      host-port: <- `${db_port}`
    db_studio:
      port: 2480
      container: db
      protocol: tcp
      host-port: <- `${db_studio_port}`
